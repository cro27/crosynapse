{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "gpsmelbADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/emp_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gpsmelb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "empbydept.csv",
						"fileSystem": "adflake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/employees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asmDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "EMPLOYEES"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/gpsmelb_sqldb1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/numbersCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gpsmelb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "numbers.csv",
						"fileSystem": "adflake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlstage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "contosoStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_hourly')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ocpmelb_sqldb1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "deviceid",
						"type": "nvarchar"
					},
					{
						"name": "enq_utctime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "rec_datetime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "rainfall_hour",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "temp_min",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "temp_max",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "wind_gust_max",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "wind_avg",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "humidity_min",
						"type": "int",
						"precision": 10
					},
					{
						"name": "humidity_max",
						"type": "int",
						"precision": 10
					},
					{
						"name": "air_pressure_min",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "air_pressure_max",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Weather_hourly"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WeatherDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "deviceID",
						"type": "string"
					},
					{
						"name": "messageId",
						"type": "int"
					},
					{
						"name": "rec_time",
						"type": "datetime"
					},
					{
						"name": "EventEnqueuedUtcTime",
						"type": "datetime"
					},
					{
						"name": "EventProcessedUtcTime",
						"type": "datetime"
					},
					{
						"name": "year",
						"type": "int"
					},
					{
						"name": "month",
						"type": "int"
					},
					{
						"name": "temp_out",
						"type": "real"
					},
					{
						"name": "hum_out",
						"type": "int"
					},
					{
						"name": "abs_pres",
						"type": "real"
					},
					{
						"name": "wind_gust",
						"type": "real"
					},
					{
						"name": "wind_avg",
						"type": "real"
					},
					{
						"name": "wind_dir",
						"type": "int"
					},
					{
						"name": "wind_pos",
						"type": "string"
					},
					{
						"name": "rain_total",
						"type": "real"
					}
				],
				"typeProperties": {
					"table": "WeatherData"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WeatherHourly')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLweatherDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "deviceid",
						"type": "nvarchar"
					},
					{
						"name": "enq_utctime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "rec_datetime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "rainfall_hour",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "temp_min",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "temp_max",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "wind_gust_max",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "wind_avg",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "humidity_min",
						"type": "int",
						"precision": 10
					},
					{
						"name": "humidity_max",
						"type": "int",
						"precision": 10
					},
					{
						"name": "air_pressure_min",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					},
					{
						"name": "air_pressure_max",
						"type": "decimal",
						"precision": 18,
						"scale": 1
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Weather_hourly"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dynamicPipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select SCHEMA_NAME(schema_id) as SchemaName, name as TableName from sys.tables\nwhere SCHEMA_NAME(schema_id) != 'changefeed'\norder by SCHEMA_NAME(schema_id)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {
									"logicalserver": {
										"value": "@pipeline().parameters.logicalserver",
										"type": "Expression"
									},
									"database": {
										"value": "@pipeline().parameters.database",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupTables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT * FROM ',item().SchemaName,'.',item().TableName)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable2",
											"type": "DatasetReference",
											"parameters": {
												"logicalserver": {
													"value": "@pipeline().parameters.logicalserver",
													"type": "Expression"
												},
												"database": {
													"value": "@pipeline().parameters.database",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText2",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"path": {
													"value": "@pipeline().parameters.path",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(item().SchemaName,'_',item().TableName,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"logicalserver": {
						"type": "string"
					},
					"database": {
						"type": "string"
					},
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dynamicPipeline_SalesLT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select SCHEMA_NAME(schema_id) as SchemaName, name as TableName from sys.tables\nwhere SCHEMA_NAME(schema_id) = 'SalesLT'\norder by SCHEMA_NAME(schema_id)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {
									"logicalserver": "@pipeline().parameters.logicalserver",
									"database": "@pipeline().parameters.database"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupTables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT * FROM ',item().SchemaName,'.',item().TableName)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "LakehouseWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable3",
											"type": "DatasetReference",
											"parameters": {
												"logicalserver": "@pipeline().parameters.logicalserver",
												"database": "@pipeline().parameters.database"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SalesLT2Lakehouse",
											"type": "DatasetReference",
											"parameters": {
												"Path": "@pipeline().parameters.path",
												"Filename": "@concat(item().SchemaName,'_',item().TableName,'.parquet')"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"logicalserver": {
						"type": "string"
					},
					"database": {
						"type": "string"
					},
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/gtest_getempbydept')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get emp data by deptno",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "begin\n  hr.get_emp(100);\nend;",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EMPLOYEE_ID",
											"type": "Decimal"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"name": "FIRST_NAME",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"name": "LAST_NAME",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"name": "EMAIL",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"name": "PHONE_NUMBER",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										}
									},
									{
										"source": {
											"name": "HIRE_DATE",
											"type": "DateTime"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"name": "JOB_ID",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										}
									},
									{
										"source": {
											"name": "SALARY",
											"type": "Decimal"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										}
									},
									{
										"source": {
											"name": "COMMISSION_PCT",
											"type": "Decimal"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										}
									},
									{
										"source": {
											"name": "MANAGER_ID",
											"type": "Decimal"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_ID",
											"type": "Decimal"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "employees",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "emp_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "add 2 numbers",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select hr.getnum('102','373') as result from dual;",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RESULT",
											"type": "Double"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "employees",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "numbersCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get avg salary by deptno",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "begin\n  hr.get_avg_sal(30);\nend;",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AVG(SALARY)",
											"type": "Double"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "employees",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "avgSalary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employees')]",
				"[concat(variables('factoryId'), '/datasets/emp_csv')]",
				"[concat(variables('factoryId'), '/datasets/numbersCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movesqldata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select SCHEMA_NAME(schema_id) as SchemaName, name as TableName from sys.tables\nwhere SCHEMA_NAME(schema_id) != 'changefeed'\norder by SCHEMA_NAME(schema_id)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "gpsmelb_sqldb1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT * FROM ',item().SchemaName,'.',item().TableName)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "gpsmelb_sqldb1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "sqlstage",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"path": {
													"value": "@pipeline().parameters.path",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(item().SchemaName,'_',item().TableName,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"path": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/gpsmelb_sqldb1')]",
				"[concat(variables('factoryId'), '/datasets/sqlstage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "LakehouseWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "PasswordHash",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "PasswordHash",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "PasswordSalt",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "PasswordSalt",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Suffix",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Suffix",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CompanyName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CompanyName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SalesPerson",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SalesPerson",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Phone",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Phone",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "NameStyle",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "NameStyle",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Title",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AW_Customer_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformMovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesCSV",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink2",
								"type": "DatasetReference"
							},
							"name": "MoviesSink"
						}
					],
					"transformations": [
						{
							"name": "FilterYears"
						},
						{
							"name": "AggregateComedyRatings"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDB",
						"MoviesDB filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> FilterYears",
						"FilterYears aggregate(groupBy(year),",
						"     AverageComedyRating = avg(toInteger(Rating))) ~> AggregateComedyRatings",
						"AggregateComedyRatings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MovieRatings.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MoviesSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformSalesperson')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "Employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Salesperson",
								"type": "DatasetReference"
							},
							"name": "ADLSG2output"
						}
					],
					"transformations": [
						{
							"name": "CombineFirstLastName"
						},
						{
							"name": "SelectColumns"
						}
					],
					"script": "source(output(\n\t\tEmployeeKey as integer,\n\t\tParentEmployeeKey as integer,\n\t\tEmployeeNationalIDAlternateKey as string,\n\t\tParentEmployeeNationalIDAlternateKey as string,\n\t\tSalesTerritoryKey as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tMiddleName as string,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tHireDate as date,\n\t\tBirthDate as date,\n\t\tLoginID as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tMaritalStatus as string,\n\t\tEmergencyContactName as string,\n\t\tEmergencyContactPhone as string,\n\t\tSalariedFlag as boolean,\n\t\tGender as string,\n\t\tPayFrequency as integer,\n\t\tBaseRate as decimal(19,4),\n\t\tVacationHours as short,\n\t\tSickLeaveHours as short,\n\t\tCurrentFlag as boolean,\n\t\tSalesPersonFlag as boolean,\n\t\tDepartmentName as string,\n\t\tStartDate as date,\n\t\tEndDate as date,\n\t\tStatus as string,\n\t\tEmployeePhoto as binary\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tlimit: 100,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select * from dbo.DimEmployee where SalariedFlag = 1',\n\tformat: 'query') ~> Employee\nEmployee derive(Salesperson = concatWS(\" \",FirstName,LastName)) ~> CombineFirstLastName\nCombineFirstLastName select(mapColumn(\n\t\tEmployeeKey,\n\t\tEmployeeID = EmployeeNationalIDAlternateKey,\n\t\tUPN = EmailAddress,\n\t\tSalesperson,\n\t\tTitle\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nSelectColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tStateProvince as string,\n\t\tTotalOrders as long\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ADLSG2output"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadHourlyFromKQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "KQLtoDB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "WeatherData\n   | where format_datetime(EventProcessedUtcTime, 'yyyy-MM-dd HH') == format_datetime(now(-1h), 'yyyy-MM-dd HH')\n   | summarize Year = max(year), Month = max(month), enq_utctime = max(datetime_add('hour',1,todatetime(strcat(strcat(format_datetime(EventProcessedUtcTime, 'yyyy-MM-dd'), 'T'), strcat(format_datetime(EventProcessedUtcTime, 'HH:'), '00:00Z'))))), rec_datetime = max(datetime_add('hour',1,todatetime(strcat(strcat(format_datetime(rec_time, 'yyyy-MM-dd'), 'T'), strcat(format_datetime(rec_time, 'HH:'), '00:00Z'))))), Rainfall_hour = round(max(rain_total) - min(rain_total),1), temp_max = round(max(temp_out),1), temp_min = round(min(temp_out),1), wind_gust_max = round(max(wind_gust),1), wind_avg = round(avg(wind_avg),1), humidity_min = min(hum_out), humidity_max = max(hum_out), air_pressure_min = round(min(abs_pres),1), air_pressure_max = round(max(abs_pres),1)\n   | project deviceId = \"wattlepi\", todatetime(rec_datetime), todatetime(enq_utctime), Rainfall_hour, temp_min, temp_max,  wind_gust_max, wind_avg, humidity_min, humidity_max, air_pressure_min, air_pressure_max, Year, Month",
								"queryTimeout": "01:00:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "deviceId",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "deviceid",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "enq_utctime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "enq_utctime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "rec_datetime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "rec_datetime",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "Rainfall_hour",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "rainfall_hour",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "temp_min",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "temp_min",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "temp_max",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "temp_max",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "wind_gust_max",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "wind_gust_max",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "wind_avg",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "wind_avg",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "humidity_min",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "humidity_min",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "humidity_max",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "humidity_max",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "air_pressure_min",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "air_pressure_min",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "air_pressure_max",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "air_pressure_max",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 18
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WeatherData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "WeatherHourly",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WeatherData')]",
				"[concat(variables('factoryId'), '/datasets/WeatherHourly')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalespersonPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TransformSalesperson",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TransformSalesperson",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"ADLSG2output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-02-08T07:23:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TransformSalesperson')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TransformMovies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TransformMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"MoviesSink": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntime1",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TransformMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadHourlyWeather')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "LoadHourlyFromKQL",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2024-05-21T15:10:00",
						"timeZone": "AUS Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/LoadHourlyFromKQL')]"
			]
		}
	]
}